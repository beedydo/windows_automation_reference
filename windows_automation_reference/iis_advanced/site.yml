---
- name: This is a play within a playbook
  hosts: windows
  
  # This is where the variables of this playbook will be stored
  vars:
    # You are defining a list-type variable called iis_sites. What follows is a list of each site with it’s related variables
    iis_sites:
      - name: 'Ansible Playbook Test'
        port: '8080'
        path: 'C:\sites\playbooktest'
      - name: 'Ansible Playbook Test 2'
        port: '8081'
        path: 'C:\sites\playbooktest2'
    iis_test_message: "Hello World!  My test IIS Server"

  tasks:
    - name: Install IIS
      ansible.windows.win_feature:
        name: Web-Server
        state: present
    
    # The win_file module is used to create, modify, delete files, directories, and symlinks.
    # You are telling Ansible that this will expand into a list item. Each item has several variables like name, port, and path.
    # with_items: This is your loop which is instructing Ansible to perform this task on every item in iis_sites
    - name: Create site directory structure
      ansible.windows.win_file:
        path: "{{ item.path }}"
        state: directory
      with_items: "{{ iis_sites }}"

    - name: Create IIS site
      community.windows.win_iis_website:
        name: "{{ item.name }}"
        state: started
        port: "{{ item.port }}"
        physical_path: "{{ item.path }}"
      with_items: "{{ iis_sites }}"
      # notify: restart iis service This statement is a handler, so we’ll come back to it in Section 3.
      notify: restart iis service

    # Step 2:
    # win_firewall_rule: This module is used to create, modify, and update firewall rules. 
    # Note in the case of AWS there are also security group rules which may impact communication. We’ve opened these for the ports in this example.
    - name: Open port for site on the firewall
      community.windows.win_firewall_rule:
        name: "iisport{{ item.port }}"
        enable: true
        state: present
        localport: "{{ item.port }}"
        action: Allow
        direction: In
        protocol: Tcp
      with_items: "{{ iis_sites }}"
    
    # win_template: This module specifies that a jinja2 template is being used and deployed.
    # with_items: used in Ansible to transform data inside a template expression, i.e. filters.
    - name: Template simple web site to iis_site_path as index.html
      ansible.windows.win_template:
        src: 'index.html.j2'
        dest: '{{ item.path }}\index.html'
      with_items: "{{ iis_sites }}"

    # debug: Again, like in the iis_basic playbook, this task displays the URLs to access the sites we are creating for this exercise
    - name: Show website addresses
      ansible.builtin.debug:
        msg: "{{ item }}"
      loop:
        - http://{{ ansible_host }}:8080
        - http://{{ ansible_host }}:8081

  # handler: This is telling the play that the tasks: are over, and now we are defining handlers:. 
  # Everything below that looks the same as any other task, i.e. you give it a name, a module, and the options for that module. This is the definition of a handler.
  # Refer back to the win_iis_website task where we called upon this handler. 
  handlers:
    - name: restart iis service
      ansible.windows.win_service:
        name: W3Svc
        state: restarted
        start_mode: auto